# 05-Exchange-Functions.ps1
# Exchange Online role audit functions - Certificate Authentication Only
# Cleaned up version - Organizational relationships removed as out of scope
#Requires -Modules @{ModuleName = 'Microsoft.Graph.Users'; ModuleVersion = '2.29.0'}
#Requires -Modules @{ModuleName = 'Microsoft.Graph.Identity.DirectoryManagement'; ModuleVersion ='2.29.0'}
#Requires -Modules @{ModuleName = 'ExchangeOnlineManagement'; ModuleVersion = '3.8.0'}

function Get-ExchangeRoleAudit {
    param(
        [Parameter(Mandatory = $true)]
        [string]$Organization,

        [string]$TenantId,
        
        [string]$ClientId,
        
        [string]$CertificateThumbprint
    )
    
    $results = @()
    
    try {
        # Set app credentials if provided, otherwise use existing script variables
        if ($TenantId -and $ClientId -and $CertificateThumbprint) {
            Set-M365AuditCertCredentials -TenantId $TenantId -ClientId $ClientId -CertificateThumbprint $CertificateThumbprint
        }
        
        # Verify certificate authentication is configured
        if (-not $script:AppConfig.UseAppAuth -or $script:AppConfig.AuthType -ne "Certificate") {
            Write-Warning "Certificate authentication is required for Exchange role audit"
            Write-Host "Please configure certificate authentication first:" -ForegroundColor Yellow
            Write-Host "• Run: Set-M365AuditCertCredentials -TenantId <id> -ClientId <id> -CertificateThumbprint <thumbprint>" -ForegroundColor White
            Write-Host "• Or: Get-M365AuditRequiredPermissions for setup instructions" -ForegroundColor White
            return $results
        }
        
        # Use script variables for authentication
        # Write-Host "Using configured certificate credentials:" -ForegroundColor Cyan
        # Write-Host "  Tenant ID: $($script:AppConfig.TenantId)" -ForegroundColor Gray
        # Write-Host "  Client ID: $($script:AppConfig.ClientId)" -ForegroundColor Gray
        # Write-Host "  Certificate Thumbprint: $($script:AppConfig.CertificateThumbprint)" -ForegroundColor Gray

        # Connect to Microsoft Graph now to see if that resolved the DLL Conflict.
        $context = Get-MgContext
        if (-not $context -or $context.AuthType -ne "AppOnly") {
             Connect-MgGraph -TenantId $script:AppConfig.TenantId -ClientId $script:AppConfig.ClientId -CertificateThumbprint $script:AppConfig.CertificateThumbprint -NoWelcome
         }
    
        # Connect to Exchange Online for basic Exchange functions
        $exoSession = Get-PSSession | Where-Object { $_.ComputerName -like "*outlook*" -and $_.State -eq "Opened" }
        if (-not $exoSession) {
            Write-Host "Connecting to Exchange Online with certificate authentication..." -ForegroundColor Yellow
            
            try {
                if ($IsWindows) {
                    Connect-ExchangeOnline `
                        -AppId $script:AppConfig.ClientId `
                        -CertificateThumbprint $script:AppConfig.CertificateThumbprint `
                        -Organization $Organization `
                        -ShowBanner:$false
                    Write-Host "✓ Connected to Exchange Online successfully" -ForegroundColor Green
                } elseIf ($IsLinux -or $IsMacOS) {
                    # $Cert = Get-X509Certificate -$script:AppConfig.CertificateThumbprint
                    Connect-ExchangeOnline `
                        -AppId $script:AppConfig.ClientId `
                        -Certificate $script:AppConfig.Certificate `
                        -Organization $Organization `
                        -ShowBanner:$false
                    Write-Host "✓ Connected to Exchange Online successfully" -ForegroundColor Green
                }
            }
            catch {
                Write-Error "Exchange Online certificate authentication failed: $($_.Exception.Message)"
                Write-Host "Troubleshooting steps:" -ForegroundColor Yellow
                Write-Host "• Ensure certificate is uploaded to Azure AD app registration" -ForegroundColor White
                Write-Host "• Verify app has Exchange.ManageAsApp permission" -ForegroundColor White
                Write-Host "• Check certificate expiration and validity" -ForegroundColor White
                Write-Host "• Run: Get-M365AuditCurrentConfig to verify configuration" -ForegroundColor White
                return $results
            }
        }
        else {
            Write-Host "✓ Already connected to Exchange Online" -ForegroundColor Green
        }
        
        # Connect to Security & Compliance Center for role management
        $sccSession = Get-PSSession | Where-Object { $_.ComputerName -like "*compliance*" -and $_.State -eq "Opened" }
        if (-not $sccSession) {
            Write-Host "Connecting to Security & Compliance Center for role data..." -ForegroundColor Yellow
            
            try {
                if ($IsWindows) {
                    Connect-IPPSSession `
                        -AppId $script:AppConfig.ClientId `
                        -CertificateThumbprint $script:AppConfig.CertificateThumbprint `
                        -Organization $Organization `
                        -ShowBanner:$false
                    Write-Host "✓ Connected to Security & Compliance Center successfully" -ForegroundColor Green
                } elseIf ($IsLinux -or $IsMacOS) {
                    Connect-IPPSSession `
                        -AppId $script:AppConfig.ClientId `
                        -Certificate $script:AppConfig.Certificate `
                        -Organization $Organization `
                        -ShowBanner:$false
                    Write-Host "✓ Connected to Security & Compliance Center successfully" -ForegroundColor Green
                }
            }
            catch {
                Write-Warning "Security & Compliance Center connection failed: $($_.Exception.Message)"
                Write-Host "Continuing with Exchange Online role groups only..." -ForegroundColor Yellow
            }
        }
        
        # Verify Exchange Online connection
        try {
            $null = Get-OrganizationConfig -ErrorAction Stop
            Write-Host "✓ Exchange Online connection verified" -ForegroundColor Green
        }
        catch {
            Write-Error "Exchange Online connection verification failed: $($_.Exception.Message)"
            return $results
        }
        
        # Get Exchange role groups (available in Exchange Online Management)
        Write-Host "Retrieving Exchange role groups..." -ForegroundColor Cyan
        try {
            $roleGroups = Get-RoleGroup -ErrorAction Stop
            Write-Host "Found $($roleGroups.Count) Exchange role groups" -ForegroundColor Green
            
            foreach ($group in $roleGroups) {
                try {
                    $members = Get-RoleGroupMember -Identity $group.Identity -ErrorAction SilentlyContinue
                    foreach ($member in $members) {
                        $results += [PSCustomObject]@{
                            Service = "Exchange Online"
                            UserPrincipalName = $member.PrimarySmtpAddress
                            DisplayName = $member.DisplayName
                            UserId = $member.ExternalDirectoryObjectId
                            RoleName = $group.Name
                            RoleDefinitionId = $group.Guid
                            AssignmentType = "Role Group Member"
                            AssignedDateTime = $null
                            UserEnabled = $null
                            LastSignIn = $null
                            Scope = "Organization"
                            AssignmentId = $group.Identity
                            RoleGroupDescription = $group.Description
                            AuthenticationType = "Certificate"
                        }
                    }
                }
                catch {
                    Write-Verbose "Could not get members for role group $($group.Name): $($_.Exception.Message)"
                }
            }
        }
        catch {
            Write-Warning "Could not retrieve Exchange role groups: $($_.Exception.Message)"
        }
        
        # Get individual role assignments (requires Security & Compliance Center connection)
        if (Get-PSSession | Where-Object { $_.ComputerName -like "*compliance*" -and $_.State -eq "Opened" }) {
            Write-Host "Retrieving individual role assignments..." -ForegroundColor Cyan
            try {
                $roleAssignments = Get-RoleAssignment -ErrorAction SilentlyContinue | Where-Object { $_.AssignmentMethod -eq "Direct" }
                
                foreach ($assignment in $roleAssignments) {
                    $results += [PSCustomObject]@{
                        Service = "Exchange Online"
                        UserPrincipalName = $assignment.User
                        DisplayName = $assignment.User
                        UserId = $null
                        RoleName = $assignment.Role
                        RoleDefinitionId = $null
                        AssignmentType = $assignment.AssignmentMethod
                        AssignedDateTime = $assignment.WhenCreated
                        UserEnabled = $null
                        LastSignIn = $null
                        Scope = $assignment.RecipientOrganizationUnitScope
                        AssignmentId = $assignment.Identity
                        OrganizationalUnit = $assignment.RecipientOrganizationUnitScope
                        ManagementScope = $assignment.CustomRecipientWriteScope
                        AuthenticationType = "Certificate"
                    }
                }
                
                # Get management scopes
                $managementScopes = Get-ManagementScope -ErrorAction SilentlyContinue
                foreach ($scope in $managementScopes) {
                    $results += [PSCustomObject]@{
                        Service = "Exchange Online"
                        UserPrincipalName = "System Configuration"
                        DisplayName = "Management Scope Definition"
                        UserId = $null
                        RoleName = "Management Scope"
                        RoleDefinitionId = $null
                        AssignmentType = "Scope Definition"
                        AssignedDateTime = $scope.WhenCreated
                        UserEnabled = $null
                        LastSignIn = $null
                        Scope = $scope.Name
                        AssignmentId = $scope.Identity
                        ScopeType = $scope.ScopeRestrictionType
                        ScopeFilter = $scope.RecipientFilter
                        AuthenticationType = "Certificate"
                    }
                }
            }
            catch {
                Write-Verbose "Could not retrieve role assignments from Compliance Center: $($_.Exception.Message)"
            }
        }
        
        # Get Exchange administrators from Azure AD (using Microsoft Graph)
        Write-Host "Retrieving Exchange administrators from Azure AD..." -ForegroundColor Cyan
        try {
            # Moved connecting to Microsoft Graph to earlier in the script to avoid DLL Conflict.
            # Connect to Microsoft Graph if not already connected            
            # $context = Get-MgContext
            # if (-not $context -or $context.AuthType -ne "AppOnly") {
            #     Connect-MgGraph -TenantId $script:AppConfig.TenantId -ClientId $script:AppConfig.ClientId -CertificateThumbprint $script:AppConfig.CertificateThumbprint -NoWelcome
            # }
            
            # Get Exchange-related Azure AD roles
            $exchangeRoles = @(
                "Exchange Administrator",
                "Exchange Recipient Administrator",
                "Exchange Service Administrator"
            )
            
            $roleDefinitions = Get-MgRoleManagementDirectoryRoleDefinition | Where-Object { $_.DisplayName -in $exchangeRoles }
            $assignments = Get-MgRoleManagementDirectoryRoleAssignment | Where-Object { $_.RoleDefinitionId -in $roleDefinitions.Id }
            
            foreach ($assignment in $assignments) {
                try {
                    $user = Get-MgUser -UserId $assignment.PrincipalId -ErrorAction SilentlyContinue
                    if (-not $user) { continue }
                    
                    $role = $roleDefinitions | Where-Object { $_.Id -eq $assignment.RoleDefinitionId }
                    
                    $results += [PSCustomObject]@{
                        Service = "Exchange Online"
                        UserPrincipalName = $user.UserPrincipalName
                        DisplayName = $user.DisplayName
                        UserId = $user.Id
                        RoleName = $role.DisplayName
                        RoleDefinitionId = $assignment.RoleDefinitionId
                        AssignmentType = "Azure AD Role"
                        AssignedDateTime = $assignment.CreatedDateTime
                        UserEnabled = $user.AccountEnabled
                        LastSignIn = $user.SignInActivity.LastSignInDateTime
                        Scope = $assignment.DirectoryScopeId
                        AssignmentId = $assignment.Id
                        AuthenticationType = "Certificate"
                    }
                }
                catch {
                    Write-Verbose "Error processing Exchange Azure AD assignment: $($_.Exception.Message)"
                }
            }
        }
        catch {
            Write-Verbose "Could not retrieve Exchange administrators from Azure AD: $($_.Exception.Message)"
        }
        

        
        Write-Host "✓ Exchange Online audit completed" -ForegroundColor Green
        Write-Host "Found $($results.Count) Exchange role assignments and configurations" -ForegroundColor Cyan
        
    }
    catch {
        Write-Error "Error auditing Exchange roles: $($_.Exception.Message)"
        Write-Host "Certificate Authentication Requirements:" -ForegroundColor Yellow
        Write-Host "• Valid certificate in Windows Certificate Store" -ForegroundColor White
        Write-Host "• Certificate uploaded to Azure AD app registration" -ForegroundColor White
        Write-Host "• Exchange.ManageAsApp permission granted to app" -ForegroundColor White
        Write-Host "• Admin consent provided for app permissions" -ForegroundColor White
        Write-Host ""
        Write-Host "Configuration Commands:" -ForegroundColor Cyan
        Write-Host "• Set-M365AuditCertCredentials -TenantId <id> -ClientId <id> -CertificateThumbprint <thumbprint>" -ForegroundColor White
        Write-Host "• Get-M365AuditCurrentConfig (to verify setup)" -ForegroundColor White
        Write-Host "• Get-M365AuditRequiredPermissions (for complete setup guide)" -ForegroundColor White
    }
    
    return $results
}